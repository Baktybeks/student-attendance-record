import toast, { ToastOptions } from "react-hot-toast";
import {
  CheckCircle,
  XCircle,
  AlertCircle,
  Info,
  AlertTriangle,
} from "lucide-react";
import React from "react";

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è toast
interface ExtendedToastOptions extends ToastOptions {
  description?: string;
}

// –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const getToastStyles = (type: "success" | "error" | "warning" | "info") => {
  const baseStyles = {
    borderRadius: "8px",
    border: "1px solid",
    padding: "12px 16px",
    fontSize: "14px",
    fontWeight: "500",
    display: "flex",
    alignItems: "center",
    gap: "8px",
    maxWidth: "400px",
  };

  const typeStyles = {
    success: {
      backgroundColor: "#f0fdf4",
      borderColor: "#bbf7d0",
      color: "#15803d",
    },
    error: {
      backgroundColor: "#fef2f2",
      borderColor: "#fecaca",
      color: "#dc2626",
    },
    warning: {
      backgroundColor: "#fffbeb",
      borderColor: "#fed7aa",
      color: "#d97706",
    },
    info: {
      backgroundColor: "#eff6ff",
      borderColor: "#bfdbfe",
      color: "#2563eb",
    },
  };

  return {
    ...baseStyles,
    ...typeStyles[type],
  };
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è toast
const createToastComponent = (
  type: "success" | "error" | "warning" | "info",
  message: string,
  description?: string
) => {
  const icons = {
    success: CheckCircle,
    error: XCircle,
    warning: AlertTriangle,
    info: Info,
  };

  const Icon = icons[type];

  return React.createElement(
    "div",
    { style: getToastStyles(type) },
    React.createElement(Icon, { size: 18 }),
    React.createElement(
      "div",
      null,
      React.createElement("div", null, message),
      description &&
        React.createElement(
          "div",
          {
            style: {
              fontSize: "12px",
              opacity: 0.8,
              marginTop: "2px",
            },
          },
          description
        )
    )
  );
};

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç toast
export const Toast = {
  // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ react-hot-toast
  success: (message: string, options?: ExtendedToastOptions) => {
    if (options?.description) {
      return toast.custom(
        createToastComponent("success", message, options.description),
        options
      );
    }
    return toast.success(message, options);
  },

  error: (message: string, options?: ExtendedToastOptions) => {
    if (options?.description) {
      return toast.custom(
        createToastComponent("error", message, options.description),
        options
      );
    }
    return toast.error(message, options);
  },

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
  info: (message: string, options?: ExtendedToastOptions) => {
    if (options?.description) {
      return toast.custom(
        createToastComponent("info", message, options.description),
        options
      );
    }
    return toast.custom(createToastComponent("info", message), {
      duration: 4000,
      ...options,
    });
  },

  warning: (message: string, options?: ExtendedToastOptions) => {
    if (options?.description) {
      return toast.custom(
        createToastComponent("warning", message, options.description),
        options
      );
    }
    return toast.custom(createToastComponent("warning", message), {
      duration: 4000,
      ...options,
    });
  },

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  loading: (message: string, options?: ToastOptions) => {
    return toast.loading(message, options);
  },

  promise: toast.promise,
  custom: toast.custom,
  dismiss: toast.dismiss,
  remove: toast.remove,

  // –£—Ç–∏–ª–∏—Ç—ã
  dismissAll: () => toast.dismiss(),

  // –ú–µ—Ç–æ–¥—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
  checkmark: (message: string, options?: ToastOptions) => {
    return toast.success(message, {
      icon: "‚úÖ",
      ...options,
    });
  },

  rocket: (message: string, options?: ToastOptions) => {
    return toast.success(message, {
      icon: "üöÄ",
      ...options,
    });
  },

  fire: (message: string, options?: ToastOptions) => {
    return toast.success(message, {
      icon: "üî•",
      ...options,
    });
  },

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  saved: (message: string = "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", options?: ToastOptions) => {
    return Toast.success(message, {
      icon: "üíæ",
      duration: 2000,
      ...options,
    });
  },

  deleted: (message: string = "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", options?: ToastOptions) => {
    return Toast.success(message, {
      icon: "üóëÔ∏è",
      duration: 2000,
      ...options,
    });
  },

  copied: (
    message: string = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    options?: ToastOptions
  ) => {
    return Toast.success(message, {
      icon: "üìã",
      duration: 1500,
      ...options,
    });
  },

  uploaded: (message: string = "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", options?: ToastOptions) => {
    return Toast.success(message, {
      icon: "üì§",
      duration: 2000,
      ...options,
    });
  },

  networkError: (options?: ToastOptions) => {
    return Toast.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.", {
      icon: "üåê",
      duration: 5000,
      ...options,
    });
  },

  unauthorized: (options?: ToastOptions) => {
    return Toast.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", {
      icon: "üîê",
      duration: 4000,
      ...options,
    });
  },

  forbidden: (options?: ToastOptions) => {
    return Toast.error("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", {
      icon: "üö´",
      duration: 4000,
      ...options,
    });
  },

  // –ü—Ä–æ–º–∏—Å—ã —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  promiseSave: <T>(
    promise: Promise<T>,
    messages?: {
      loading?: string;
      success?: string;
      error?: string;
    }
  ) => {
    return toast.promise(promise, {
      loading: messages?.loading || "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...",
      success: messages?.success || "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
      error: messages?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏",
    });
  },

  promiseDelete: <T>(
    promise: Promise<T>,
    messages?: {
      loading?: string;
      success?: string;
      error?: string;
    }
  ) => {
    return toast.promise(promise, {
      loading: messages?.loading || "–£–¥–∞–ª–µ–Ω–∏–µ...",
      success: messages?.success || "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
      error: messages?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
    });
  },

  promiseUpload: <T>(
    promise: Promise<T>,
    messages?: {
      loading?: string;
      success?: string;
      error?: string;
    }
  ) => {
    return toast.promise(promise, {
      loading: messages?.loading || "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...",
      success: messages?.success || "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!",
      error: messages?.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
    });
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π toast –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default Toast;

// –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π toast –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤
export { toast as originalToast };
