import React from "react";
import { Button } from "./Button";

interface EmptyStateProps {
  icon?: React.ReactNode;
  title: string;
  description?: string;
  action?: {
    label: string;
    onClick: () => void;
  };
  secondaryAction?: {
    label: string;
    onClick: () => void;
  };
  size?: "sm" | "md" | "lg";
  className?: string;
}

const sizeClasses = {
  sm: {
    container: "py-8",
    icon: "text-4xl mb-3",
    title: "text-lg",
    description: "text-sm",
  },
  md: {
    container: "py-12",
    icon: "text-6xl mb-4",
    title: "text-xl",
    description: "text-base",
  },
  lg: {
    container: "py-16",
    icon: "text-8xl mb-6",
    title: "text-2xl",
    description: "text-lg",
  },
};

export const EmptyState: React.FC<EmptyStateProps> = ({
  icon,
  title,
  description,
  action,
  secondaryAction,
  size = "md",
  className = "",
}) => {
  const classes = sizeClasses[size];

  return (
    <div className={`text-center ${classes.container} ${className}`}>
      {icon && (
        <div className={`${classes.icon} text-slate-400 mb-4`}>{icon}</div>
      )}

      <h3 className={`${classes.title} font-semibold text-slate-900 mb-2`}>
        {title}
      </h3>

      {description && (
        <p
          className={`${classes.description} text-slate-600 mb-6 max-w-md mx-auto`}
        >
          {description}
        </p>
      )}

      {(action || secondaryAction) && (
        <div className="flex flex-col sm:flex-row gap-3 justify-center">
          {action && (
            <Button variant="primary" onClick={action.onClick}>
              {action.label}
            </Button>
          )}
          {secondaryAction && (
            <Button variant="outline" onClick={secondaryAction.onClick}>
              {secondaryAction.label}
            </Button>
          )}
        </div>
      )}
    </div>
  );
};

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const NoDataState: React.FC<{
  title?: string;
  description?: string;
  action?: EmptyStateProps["action"];
}> = ({
  title = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
  description = "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.",
  action,
}) => (
  <EmptyState
    icon="üì≠"
    title={title}
    description={description}
    action={action}
  />
);

export const NoSearchResultsState: React.FC<{
  searchTerm?: string;
  onClearSearch?: () => void;
}> = ({ searchTerm, onClearSearch }) => (
  <EmptyState
    icon="üîç"
    title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    description={
      searchTerm
        ? `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.`
        : "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."
    }
    action={
      onClearSearch
        ? {
            label: "–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫",
            onClick: onClearSearch,
          }
        : undefined
    }
  />
);

export const NoPermissionState: React.FC<{
  title?: string;
  description?: string;
}> = ({
  title = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞",
  description = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –ø–æ–º–æ—â—å—é.",
}) => (
  <EmptyState icon="üîí" title={title} description={description} size="md" />
);

export const ErrorState: React.FC<{
  title?: string;
  description?: string;
  onRetry?: () => void;
}> = ({
  title = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
  description = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.",
  onRetry,
}) => (
  <EmptyState
    icon="‚ö†Ô∏è"
    title={title}
    description={description}
    action={
      onRetry
        ? {
            label: "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
            onClick: onRetry,
          }
        : undefined
    }
  />
);

export const OfflineState: React.FC<{
  onRetry?: () => void;
}> = ({ onRetry }) => (
  <EmptyState
    icon="üì°"
    title="–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    action={
      onRetry
        ? {
            label: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
            onClick: onRetry,
          }
        : undefined
    }
  />
);

export const ComingSoonState: React.FC<{
  title?: string;
  description?: string;
}> = ({
  title = "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç",
  description = "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
}) => <EmptyState icon="üöß" title={title} description={description} />;

export const MaintenanceState: React.FC<{
  title?: string;
  description?: string;
  estimatedTime?: string;
}> = ({
  title = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
  description = "–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º.",
  estimatedTime,
}) => (
  <EmptyState
    icon="üîß"
    title={title}
    description={
      estimatedTime
        ? `${description} –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${estimatedTime}.`
        : description
    }
    size="lg"
  />
);

export const WelcomeState: React.FC<{
  title: string;
  description?: string;
  action?: EmptyStateProps["action"];
  secondaryAction?: EmptyStateProps["secondaryAction"];
}> = ({ title, description, action, secondaryAction }) => (
  <EmptyState
    icon="üëã"
    title={title}
    description={description}
    action={action}
    secondaryAction={secondaryAction}
    size="lg"
  />
);
